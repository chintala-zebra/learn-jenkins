properties([
    parameters([
 [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            filterable: false,
            name: 'JobName',
            script: [$class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        def build = Thread.currentThread().getName()
                        def regexp= ".+?/job/([^/]+)/.*"
                        def match = build  =~ regexp
                        def jobName = match[0][1]
                        def parts = jobName.split('_');
                        return [jobName]
                    """.stripIndent()
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            filterable: false,
            name: 'GCP-ENVIRONMENT',
            referencedParameters: 'JobName',
            script: [$class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        import groovy.io.FileType
                        def parts = JobName.split('_');
                        if(parts.length > 2){
                            return [parts[2]]
                        } else {
                            def list = []
                            list.add('')
                            def dir = new File("/inventory/")
                            dir.eachFile (FileType.DIRECTORIES) { file ->
                                list << file.name
                            }
                            return list.sort() - 'group_vars' 
                        }
                    """.stripIndent()
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            name: 'CLUSTER_NAME',
            referencedParameters: 'JobName,GCP-ENVIRONMENT',
            script: [$class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        import groovy.io.FileType
                        if (GCP-ENVIRONMENT.isEmpty() || GCP-ENVIRONMENT==""){
                            return ''
                        } else {
                            def parts = JobName.split('_');
                            if(parts.length > 3){
                                return [parts[3]]
                            }else{
                                def list = []
                                list.add('')
                                def dir = new File("/inventory/${GCP-ENVIRONMENT}")
                                dir.eachFile (FileType.DIRECTORIES) { file ->
                                    list << file.name
                                }
                                return list.sort() - 'group_vars' 
                            }
                        }
                         """.stripIndent()
                ]
            ]
        ],
        [
            name: 'APPLICATION',
            $class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: '',
            referencedParameters: 'JobName,GCP-ENVIRONMENT,CLUSTER_NAME',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script:
                    '''
                        import groovy.io.FileType
                        if (CLUSTER_NAME.isEmpty() || CLUSTER_NAME==""){
                            return ''
                        } else {   
                            def parts = JobName.split('_');
                            if(parts.length > 4){
                                return [parts[4]]
                            } else {
                                def list = []
                                list.add('')
                                def dir = new File("/inventory/${GCP-ENVIRONMENT}/${CLUSTER_NAME}")
                                dir.eachFile (FileType.FILES) { file ->
                                    list << file.name.replaceAll('.yml','');
                                }
                                return list
                            }
                        }
                    '''
                ]
            ]
        ]
    ])
])

pipeline {
    agent any
    stages {
        stage('Print the Values') {
            steps {
                echo "Environment: ${params.GCP-ENVIRONMENT}"
                echo "Cluster Name: ${params.CLUSTER_NAME}"
                echo "Application Name: ${params.APPLICATION}"
                echo "JobName:  ${params.JobName.split('_')}"
                //sh "exit 1"
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }

    }
}