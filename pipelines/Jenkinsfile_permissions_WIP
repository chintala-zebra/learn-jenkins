properties([
    parameters([
 [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            filterable: false,
            name: 'JobName',
            script: [$class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        def build = Thread.currentThread().getName()
                        def regexp= ".+?/job/([^/]+)/.*"
                        def match = build  =~ regexp
                        def jobName = match[0][1]
                        def parts = jobName.split('_');
                        return [jobName]
                    """.stripIndent()
                ]
            ]
        ], 
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            filterable: false,
            name: 'Environment',
            referencedParameters: 'JobName',
            script: [$class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        def parts = JobName.split('_');
                        return [parts[2]]
                    """.stripIndent()
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            name: 'Cluster',
            referencedParameters: 'Environment',
            script: [$class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        return [Thread.currentThread().toString()]
                         """.stripIndent()
                ]
            ]
        ]
    ])
])

pipeline {
    agent any
    stages {
        stage('Print the Values') {
            steps {
                echo "Environment: ${params.HIDDEN_PARAM}"
                echo "Cluster Name: ${params.CLUSTER_NAME}"
                echo "Application Name: ${params.APPLICATION}"
                //sh "exit 1"
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }

    }
}