properties([
    parameters([
        [$class: 'ChoiceParameter',
            name: 'JobName',
            choiceType: 'PT_SINGLE_SELECT',
            filterable: false,
            script: [$class: 'GroovyScript',
                fallbackScript: [ classpath: [], sandbox: true, script: 'return ["ERROR"]' ],
                script: [ classpath: [], sandbox: true, 
                    script: """
                        def build = Thread.currentThread().getName()
                        def regexp= ".+?/job/([^/]+)/.*"
                        def match = build  =~ regexp
                        def jobName = match[0][1]
                        def parts = jobName.split('_');
                        return [jobName]
                    """.stripIndent()
                ]
            ]
        ]
    ])
])

pipeline {
    agent any
    stages {
        stage('Print the Values') {
            steps {
                echo "Environment: ${params.ENVIRONMENT}"
                echo "Cluster: ${params.CLUSTER_NAME}"
                echo "Application: ${params.APPLICATION}"
                //sh "exit 1"
            }
        }
        stage("Build Notification") {
			steps {
                script {
                    if (params.NOTIFY_MIDDLEWARE) {
                    office365ConnectorSend webhookUrl: MIDDLEWARE_TEAMS_CHANNEL,
                        status: "Success",
                        factDefinitions: [
                            [name: "Environment", template:  ENVIRONMENT],
                            [name: "Cluster", template: CLUSTER_NAME],
                            [name: "Application", template: APPLICATION]                            
                        ]
                    }
                }
			}
		}
    }
    post {
        unsuccessful {
            office365ConnectorSend webhookUrl: MIDDLEWARE_TEAMS_CHANNEL,
                factDefinitions: [
                        [name: "Environment", template:  ENVIRONMENT],
                        [name: "Cluster", template: CLUSTER_NAME],
                        [name: "Application", template: APPLICATION]
                    ]
        }
        cleanup {
            cleanWs()
        }
    }
}